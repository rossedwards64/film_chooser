#+title: Notes

* Program Steps:
** Get User Input
- The user will be asked for the search category they wish to use, and a search term.
** Download/Read Related File
- Use a local file by default
- For example, if the user selected the "Title" category, title.basics.tsv will be read if available, otherwise it will be downloaded from IMDB.
  If a Record has a const field (tconst, nconst), it will be replaced with the corresponding value in the appropriate file.
** Collect Records From File
- The file will be parsed and each row will be deserialized into a Record object; a vector of Records will be produced.
  Filtering will happen at this stage: Each line will be matched against a filter depending on the category chosen by the user.

* Record Types
- Alternate Titles: "title.akas.tsv.gz"
- Titles: "title.basics.tsv.gz"
- Crew: "title.crew.tsv.gz"
- Episode: "title.episode.tsv.gz"
- Cast: "title.principal.tsv.gz"
- Rating: "title.ratings.tsv.gz"
- Actors: "name.basics.tsv.gz"

* Record Filtering
** Titles
- If a user enters a title, only collect records from the file that contain the title string in their primary_title/original_title field.

** Directors/Writers
- If a user enters a director/writer:
  - Collect film records that contain the same tconst as the crew member.
  - Collect name records that contain the same nconst as the crew member.

** Actors
- If a user enters an actor:
  - Collect film records that contain the same tconst as the actor.
  - Collect name records that contain the same nconst as the actor.

* Record Display
- Currently, this uses rudimentary std::fmt implementation for each Record subtype. This should be improved for more readability.
